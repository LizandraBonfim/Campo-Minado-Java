package br.com.cod3r.cm.modelo;

import static org.junit.Assert.assertFalse;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import br.com.cod3r.cm.excecao.ExplosaoException;

public class CampoTeste {

	private Campo campo;

	@BeforeEach
	void iniciarCampo() {
		campo = new Campo(3, 3);
	}

	@Test
	void testeVizinhoRealEsquerda() {
		Campo vizinho = new Campo(3, 2);
		boolean resultadoEsquerda = campo.AdicionarVizinho(vizinho);

		assertTrue(resultadoEsquerda);
	}

	@Test
	void testeVizinhoRealDireita() {

		Campo vizinho = new Campo(3, 4);
		boolean resultadoDireita = campo.AdicionarVizinho(vizinho);

		assertTrue(resultadoDireita);
	}

	@Test

	void testeVizinhoRealEmCima() {

		Campo vizinho = new Campo(2, 3);
		boolean resultadoCima = campo.AdicionarVizinho(vizinho);

		assertTrue(resultadoCima);
	}

	@Test

	void testeVizinhoRealEmBaixo() {
 
		Campo vizinho = new Campo(4, 3);
		boolean resultadoBaixo = campo.AdicionarVizinho(vizinho);

		assertTrue(resultadoBaixo);
	}
	
	@Test

	void testeVizinhoRealDiagonal() {

		Campo vizinho = new Campo(2, 2);
		boolean resultadoBaixo = campo.AdicionarVizinho(vizinho);

		assertTrue(resultadoBaixo);
	}
	
	@Test

	void testeNaoVizinho() {

		Campo vizinho = new Campo(1,1);
		boolean resultadoBaixo = campo.AdicionarVizinho(vizinho);

		assertFalse(resultadoBaixo);
	}
	
	@Test
	void testeValorPadraoAtributoMarcado() {
		assertFalse(campo.isMarcado());
	}
	
	@Test
	void testeAlternarMarcacao() {
		campo.alternaMarcacao();
		assertTrue(campo.isMarcado());
	}
	
	@Test
	void testeAlternarMarcacaoDuasChamadas() {
		campo.alternaMarcacao();
		campo.alternaMarcacao();
		assertFalse(campo.isMarcado());
	}
	
	@Test
	void testeAbrirNaoMinadoNaoMarcado() {
		
		assertTrue(campo.abrir());
	}
	
	@Test
	void testeAbrirNaoMinadoMarcado() {
		campo.alternaMarcacao();
		campo.minar();
		assertFalse(campo.abrir());
	}
	
	@Test
	void testeAbrirMinadoENaoMarcado() {
		campo.minar();
		
		assertThrows(ExplosaoException.class , () -> {
			
			campo.abrir();
		});
	}
	
	@Test
	void testeAbrirComVizinhos() {
		
		Campo vizinho1 = new Campo(2,3);
		Campo vizinhoDoVizinho1 = new Campo(1,1);
		
		vizinho1.AdicionarVizinho(vizinhoDoVizinho1);
		campo.AdicionarVizinho(vizinho1);
		
		assertFalse(campo.abrir());
	}
		
	
	
	
	
}
